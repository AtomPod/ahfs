package main

import (
	"encoding/gob"
	"fmt"
	"log"
	"net/http"
	"net/url"

	"github.com/dgrijalva/jwt-go"
	"github.com/go-oauth2/oauth2/v4/errors"
	"github.com/go-oauth2/oauth2/v4/generates"
	"github.com/go-oauth2/oauth2/v4/manage"
	"github.com/go-oauth2/oauth2/v4/models"
	"github.com/go-oauth2/oauth2/v4/server"
	"github.com/go-oauth2/oauth2/v4/store"
	"github.com/gorilla/sessions"
)

var (
	storeSession sessions.Store
)

func main() {
	gob.Register(url.Values{})
	storeSession = sessions.NewCookieStore([]byte("cookie"))

	manager := manage.NewDefaultManager()
	manager.MustTokenStorage(store.NewMemoryTokenStore())
	manager.MapAccessGenerate(generates.NewJWTAccessGenerate("", []byte("123456"), jwt.SigningMethodHS512))

	clientStore := store.NewClientStore()
	clientStore.Set("0213456", &models.Client{
		ID:     "0213456",
		Secret: "123456",
		Domain: "http://localhost:9094",
	})
	manager.MapClientStorage(clientStore)

	srv := server.NewDefaultServer(manager)
	srv.SetAllowGetAccessRequest(true)
	srv.SetClientInfoHandler(server.ClientFormHandler)

	srv.SetInternalErrorHandler(func(err error) (re *errors.Response) {
		log.Println("Internal Error:", err.Error())
		return
	})

	srv.SetResponseErrorHandler(func(re *errors.Response) {
		log.Println("response error: ", re.Error.Error())
	})

	srv.SetPasswordAuthorizationHandler(func(username, password string) (userID string, err error) {
		if username == "test" && password == "test" {
			userID = "test"
		} else {
			err = fmt.Errorf("incorrect username or password")
		}
		return
	})

	srv.SetUserAuthorizationHandler(userAuthHandler)

	http.HandleFunc("/authorize", func(w http.ResponseWriter, r *http.Request) {
		session, _ := storeSession.Get(r, "ahfs")

		if r.Form == nil {
			r.ParseForm()
		}

		var form url.Values
		if v, ok := session.Values["ReturnUri"]; ok {
			form = v.(url.Values)
		}

		if r.Form == nil {
			r.Form = form
		} else {
			log.Println("user auth", form)
			for k, _ := range form {
				r.Form.Set(k, form.Get(k))
			}
		}
		delete(session.Values, "ReturnUri")
		session.Save(r, w)

		err := srv.HandleAuthorizeRequest(w, r)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	})

	http.HandleFunc("/token", func(w http.ResponseWriter, r *http.Request) {
		srv.HandleTokenRequest(w, r)
	})

	http.HandleFunc("/auth", authHandler)
	http.HandleFunc("/login", loginHandler)

	log.Fatal(http.ListenAndServe(":9096", nil))
}

func userAuthHandler(w http.ResponseWriter, r *http.Request) (userID string, err error) {
	session, _ := storeSession.Get(r, "ahfs")

	uid, ok := session.Values["LoggedInUserID"]
	if !ok {
		if r.Form == nil {
			r.ParseForm()
		}
		session.Values["ReturnUri"] = r.Form
		log.Println("auth", r.Form)
		log.Println("save session", session.Save(r, w))

		w.Header().Set("Location", "/login")
		w.WriteHeader(http.StatusFound)
		return
	}

	log.Println("auth2", r.Form)
	userID = uid.(string)
	delete(session.Values, "LoggedInUserID")
	session.Save(r, w)
	return
}

func loginHandler(w http.ResponseWriter, r *http.Request) {
	session, _ := storeSession.Get(r, "ahfs")

	if r.Method == "POST" {
		if r.Form == nil {
			if err := r.ParseForm(); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		}
		log.Println("login post", r.Form)
		session.Values["LoggedInUserID"] = r.Form.Get("username")
		session.Save(r, w)

		w.Header().Set("Location", "/auth")
		w.WriteHeader(http.StatusFound)
		return
	}
	log.Println("login", session.Values["ReturnUri"])
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`
	<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form action="/login" method="post">
        username: <input name="username" type="text" />
        password: <input name="password" type="password" />
        <button type="submit">submit</button>
    </form>
</body>
</html>
	`))
}

func authHandler(w http.ResponseWriter, r *http.Request) {
	session, _ := storeSession.Get(r, "ahfs")

	if _, ok := session.Values["LoggedInUserID"]; !ok {
		w.Header().Set("Location", "/login")
		w.WriteHeader(http.StatusFound)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`
	<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form action="/authorize" method="post">
        <button type="submit">Authorize</button>
    </form>
</body>
</html>
	`))
}
